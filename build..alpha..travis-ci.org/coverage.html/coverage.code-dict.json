{"/home/travis/build/npmtest/node-npmtest-mochawesome/test.js":"/* istanbul instrument in package npmtest_mochawesome */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mochawesome/lib.npmtest_mochawesome.js":"/* istanbul instrument in package npmtest_mochawesome */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mochawesome = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mochawesome = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mochawesome/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mochawesome && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mochawesome */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mochawesome\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mochawesome.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mochawesome.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mochawesome.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mochawesome.__dirname + '/lib.npmtest_mochawesome.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mochawesome/node_modules/mochawesome/dist/mochawesome.js":"'use strict';\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\n/**\n * Done function gets called before mocha exits\n *\n * @param {Object} output\n * @param {Object} config\n * @param {Function} exit\n */\n\nvar done = function () {\n  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(output, config, failures, exit) {\n    var reportJsonFile, reportHtmlFile;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reportJsonFile = config.reportJsonFile, reportHtmlFile = config.reportHtmlFile;\n            _context.prev = 1;\n            _context.next = 4;\n            return saveFile(reportJsonFile, output);\n\n          case 4:\n            log('Report JSON saved to ' + reportJsonFile, null, config);\n\n            // Create and save the HTML to disk\n            _context.next = 7;\n            return marge.create(output, config);\n\n          case 7:\n            log('Report HTML saved to ' + reportHtmlFile, null, config);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context['catch'](1);\n\n            log(_context.t0, 'error', config);\n\n          case 13:\n            exit && exit(failures);\n\n          case 14:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[1, 10]]);\n  }));\n\n  return function done(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Initialize a new reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mocha = require('mocha');\nvar uuid = require('uuid');\nvar stringify = require('json-stringify-safe');\nvar conf = require('./config');\nvar marge = require('mochawesome-report-generator');\nvar utils = require('./utils');\n\n// Import the utility functions\nvar log = utils.log,\n    getPercentClass = utils.getPercentClass,\n    cleanTest = utils.cleanTest,\n    traverseSuites = utils.traverseSuites,\n    saveFile = utils.saveFile;\n\n// Track the total number of tests registered\n\nvar totalTestsRegistered = { total: 0 };function Mochawesome(runner, options) {\n  var _this = this;\n\n  // Done function will be called before mocha exits\n  // This is where we will save JSON and generate the report\n  this.done = function (failures, exit) {\n    return done(_this.output, _this.config, failures, exit);\n  };\n\n  // Reset total tests counter\n  totalTestsRegistered.total = 0;\n\n  // Create/Save necessary report dirs/files\n  var reporterOpts = options && options.reporterOptions || {};\n  this.config = conf(reporterOpts);\n\n  // Call the Base mocha reporter\n  mocha.reporters.Base.call(this, runner);\n\n  // Show the Spec Reporter in the console\n  new mocha.reporters.Spec(runner); // eslint-disable-line\n\n  var allTests = [];\n  var allPending = [];\n  var allFailures = [];\n  var allPasses = [];\n  var endCalled = false;\n\n  // Add a unique identifier to each test\n  runner.on('test', function (test) {\n    return test.uuid = uuid.v4();\n  });\n\n  // Add test to array of all tests\n  runner.on('test end', function (test) {\n    return allTests.push(test);\n  });\n\n  // Add pending test to array of pending tests\n  runner.on('pending', function (test) {\n    test.uuid = uuid.v4();\n    allPending.push(test);\n  });\n\n  // Add passing test to array of passing tests\n  runner.on('pass', function (test) {\n    return allPasses.push(test);\n  });\n\n  // Add failed test to array of failed tests\n  runner.on('fail', function (test) {\n    return allFailures.push(test);\n  });\n\n  // Process the full suite\n  runner.on('end', function () {\n    try {\n      /* istanbul ignore else */\n      if (!endCalled) {\n        // end gets called more than once for some reason\n        // so we ensure the suite is processed only once\n        endCalled = true;\n\n        var allSuites = _this.runner.suite;\n\n        traverseSuites(allSuites, totalTestsRegistered);\n\n        var obj = {\n          stats: _this.stats,\n          suites: allSuites,\n          allTests: allTests.map(cleanTest),\n          allPending: allPending.map(cleanTest),\n          allPasses: allPasses.map(cleanTest),\n          allFailures: allFailures.map(cleanTest),\n          copyrightYear: new Date().getFullYear()\n        };\n\n        obj.stats.testsRegistered = totalTestsRegistered.total;\n\n        var _obj$stats = obj.stats,\n            passes = _obj$stats.passes,\n            failures = _obj$stats.failures,\n            pending = _obj$stats.pending,\n            tests = _obj$stats.tests,\n            testsRegistered = _obj$stats.testsRegistered;\n\n        var passPercentage = Math.round(passes / (testsRegistered - pending) * 1000) / 10;\n        var pendingPercentage = Math.round(pending / testsRegistered * 1000) / 10;\n\n        obj.stats.passPercent = passPercentage;\n        obj.stats.pendingPercent = pendingPercentage;\n        obj.stats.other = passes + failures + pending - tests;\n        obj.stats.hasOther = obj.stats.other > 0;\n        obj.stats.skipped = testsRegistered - tests;\n        obj.stats.hasSkipped = obj.stats.skipped > 0;\n        obj.stats.failures -= obj.stats.other;\n        obj.stats.passPercentClass = getPercentClass(passPercentage);\n        obj.stats.pendingPercentClass = getPercentClass(pendingPercentage);\n\n        // Save the final output to be used in the done function\n        _this.output = stringify(obj, null, 2);\n      }\n    } catch (e) {\n      // required because thrown errors are not handled directly in the\n      // event emitter pattern and mocha does not have an \"on error\"\n      /* istanbul ignore next */\n      log('Problem with mochawesome: ' + e.stack, 'error');\n    }\n  });\n}\n\nmodule.exports = Mochawesome;","/home/travis/build/npmtest/node-npmtest-mochawesome/node_modules/mochawesome/dist/config.js":"'use strict';\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar path = require('path');\n\nvar baseConfig = {\n  reportDir: './mochawesome-reports',\n  reportFilename: 'mochawesome',\n  reportTitle: process.cwd().split(path.sep).pop(),\n  reportPageTitle: 'Mochawesome Report Card',\n  inlineAssets: false,\n  autoOpen: false,\n  enableCharts: true,\n  enableCode: true,\n  quiet: false,\n  dev: false\n};\n\nfunction _getOption(optToGet, options, isBool) {\n  var envVar = 'MOCHAWESOME_' + optToGet.toUpperCase();\n  // Order of precedence\n  // 1. Config option\n  // 2. Environment variable\n  // 3. Base config\n  if (options && typeof options[optToGet] !== 'undefined') {\n    return isBool && typeof options[optToGet] === 'string' ? options[optToGet] === 'true' : options[optToGet];\n  }\n  if (typeof process.env[envVar] !== 'undefined') {\n    return isBool ? process.env[envVar] === 'true' : process.env[envVar];\n  }\n  return baseConfig[optToGet];\n}\n\nmodule.exports = function (opts) {\n  var options = {};\n\n  // Added for compatibility. enableTestCode option is deprecated as of 2.0.3\n  if (Object.hasOwnProperty.call(opts, 'enableTestCode')) {\n    opts.enableCode = opts.enableTestCode;\n    delete opts.enableTestCode;\n  }\n\n  options.reportFilename = _getOption('reportFilename', opts);\n  options.reportDir = path.resolve(_getOption('reportDir', opts));\n  options.reportTitle = _getOption('reportTitle', opts);\n  options.reportPageTitle = _getOption('reportPageTitle', opts);\n  options.inlineAssets = _getOption('inlineAssets', opts, true);\n  options.autoOpen = _getOption('autoOpen', opts, true);\n  options.enableCharts = _getOption('enableCharts', opts, true);\n  options.enableCode = _getOption('enableCode', opts, true);\n  options.quiet = _getOption('quiet', opts, true);\n  options.dev = _getOption('dev', opts, true);\n\n  // Report Files\n  options.reportJsonFile = path.join(options.reportDir, options.reportFilename + '.json');\n  options.reportHtmlFile = path.join(options.reportDir, options.reportFilename + '.html');\n\n  return (0, _assign2.default)(baseConfig, options);\n};","/home/travis/build/npmtest/node-npmtest-mochawesome/node_modules/mochawesome-report-generator/lib/main.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar fs = require('fs-extra');\nvar path = require('path');\nvar React = require('react');\nvar opener = require('opener');\nvar render = require('react-dom/server').renderToStaticMarkup;\nvar MainHTML = require('./main-html');\nvar pkg = require('../package.json');\n\nvar distDir = path.join(__dirname, '..', 'dist');\nvar inlineAssetsDir = path.join(distDir, 'assets', 'inline');\nvar externalAssetsDir = path.join(distDir, 'assets', 'external');\n\n/**\n * Saves a file\n *\n * @param {string} filename Name of file to save\n * @param {string} data Data to be saved\n *\n * @return {Promise} Resolves if file has been successfully saved\n */\nfunction saveFile(filename, data) {\n  return new Promise(function (resolve, reject) {\n    fs.outputFile(filename, data, function (err) {\n      return err === null ? resolve(true) : reject(err);\n    });\n  });\n}\n\n/**\n * Opens a file\n *\n * @param {string} filename Name of file to open\n *\n * @return {Promise} Resolves if file has been successfully opened\n */\nfunction openFile(filename) {\n  return new Promise(function (resolve, reject) {\n    opener(filename, null, function (err) {\n      return err === null ? resolve(true) : reject(err);\n    });\n  });\n}\n\n/**\n * Synchronously loads a file with utf8 encoding\n *\n * @param {string} filename Name of file to load\n *\n * @return {string} File data as string\n */\nfunction loadFile(filename) {\n  return fs.readFileSync(filename, 'utf8');\n}\n\n/**\n * Get report options by extending base options\n * with user provided options\n *\n * @param {Object} opts Report options\n *\n * @return {Object} User options merged with default options\n */\nfunction getOptions(opts) {\n  var userOptions = opts || {};\n  var baseOptions = {\n    inlineAssets: false,\n    reportDir: path.join('.', 'mochawesome-report'),\n    reportFilename: 'mochawesome',\n    reportTitle: process.cwd().split(path.sep).pop(),\n    reportPageTitle: 'Mochawesome Report Card'\n  };\n  var mergedOptions = Object.assign(baseOptions, userOptions);\n\n  // If reportHtmlFile option was not specifically provided,\n  // create it based on the reportDir and reportFilename options\n  if (!mergedOptions.reportHtmlFile) {\n    mergedOptions.reportHtmlFile = path.join(mergedOptions.reportDir, mergedOptions.reportFilename + '.html');\n  }\n  return mergedOptions;\n}\n\n/**\n * Get the report assets for inline use\n *\n * @return {Object} Object with styles and scripts as strings\n */\nfunction getAssets() {\n  return {\n    styles: loadFile(path.join(inlineAssetsDir, 'app.css')),\n    scripts: loadFile(path.join(inlineAssetsDir, 'app.js'))\n  };\n}\n\n/**\n * Copy the report assets to the report dir\n *\n * This function follows the below logic to determine whether or not to copy the assets\n * - Assets folder does not exist -> copy assets\n * - Assets folder exists -> load the css asset to inspect the banner\n * - Error loading css file -> copy assets\n * - Read the package version from the css asset\n * - Asset version is not found -> copy assets\n * - Asset version differs from current version -> copy assets\n *\n * @param {Object} opts Report options\n *\n */\nfunction copyAssets(opts) {\n  var assetsDir = path.join(opts.reportDir, 'assets');\n  var assetsExist = fs.existsSync(assetsDir);\n  if (!assetsExist) {\n    fs.copySync(externalAssetsDir, assetsDir);\n  } else {\n    try {\n      var appCss = loadFile(path.join(assetsDir, 'app.css'));\n      var appCssVersion = /\\d+\\.\\d+\\.\\d+/.exec(appCss);\n      if (!appCssVersion || appCssVersion[0] !== pkg.version) {\n        fs.copySync(externalAssetsDir, assetsDir);\n      }\n    } catch (e) {\n      fs.copySync(externalAssetsDir, assetsDir);\n    }\n  }\n}\n\n/**\n * Renders the main report React component\n *\n * @param {Object} data JSON test data\n * @param {Object} options Report options\n * @param {string} styles Inline stylesheet\n * @param {string} scripts Inline script\n *\n * @return {string} Rendered HTML string\n */\nfunction renderHtml(data, options, styles, scripts) {\n  return render(React.createElement(MainHTML, { data: data, options: options, styles: styles, scripts: scripts }));\n}\n\n/**\n * Prepare options, assets, and html for saving\n *\n * @param {string} reportData JSON test data\n * @param {Object} opts Report options\n *\n * @return {Object} Prepared data for saving\n */\nfunction prepare(reportData, opts) {\n  // Stringify the data if needed\n  var data = reportData;\n  if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n    data = JSON.stringify(reportData);\n  }\n\n  // Get the options\n  var options = getOptions(opts);\n\n  var assets = {};\n  // If options.inlineAssets is true, get the\n  // styles and scripts as strings\n  if (!options.dev) {\n    if (options.inlineAssets) {\n      assets = getAssets(options);\n    } else {\n      // Otherwise copy the files to the assets dir\n      copyAssets(options);\n    }\n  }\n\n  // Render basic template to string\n  var _assets = assets,\n      styles = _assets.styles,\n      scripts = _assets.scripts;\n\n  var html = '<!doctype html>\\n' + renderHtml(data, options, styles, scripts);\n  return { html: html, reportFilename: options.reportHtmlFile, options: options };\n}\n\n/**\n * Create the report\n *\n * @param {string} data JSON test data\n * @param {Object} opts Report options\n *\n * @return {Promise} Resolves if report was created successfully\n */\nfunction create(data, opts) {\n  var _prepare = prepare(data, opts),\n      html = _prepare.html,\n      reportFilename = _prepare.reportFilename,\n      options = _prepare.options;\n\n  return saveFile(reportFilename, html).then(function () {\n    return options.autoOpen && openFile(reportFilename);\n  });\n}\n\n/**\n * Create the report synchronously\n *\n * @param {string} data JSON test data\n * @param {Object} opts Report options\n *\n */\nfunction createSync(data, opts) {\n  var _prepare2 = prepare(data, opts),\n      html = _prepare2.html,\n      reportFilename = _prepare2.reportFilename,\n      options = _prepare2.options;\n\n  fs.outputFileSync(reportFilename, html);\n  if (options.autoOpen) opener(reportFilename);\n}\n\n/**\n * Expose create/createSync functions\n *\n */\nmodule.exports = { create: create, createSync: createSync };","/home/travis/build/npmtest/node-npmtest-mochawesome/node_modules/mochawesome-report-generator/lib/main-html.js":"'use strict';\n\n/* eslint-disable react/no-danger */\nvar React = require('react');\n\nvar PropTypes = React.PropTypes;\n\n\nfunction MainHTML(props) {\n  var data = props.data,\n      options = props.options,\n      scripts = props.scripts,\n      styles = props.styles;\n\n  var clientScript = options.dev ? 'http://localhost:8080/app.js' : 'assets/app.js';\n  var clientStyle = options.dev ? 'http://localhost:8080/app.css' : 'assets/app.css';\n  return React.createElement(\n    'html',\n    { lang: 'en' },\n    React.createElement(\n      'head',\n      null,\n      React.createElement('meta', { charSet: 'utf-8' }),\n      React.createElement('meta', { httpEquiv: 'X-UA-Compatible', content: 'IE=edge' }),\n      React.createElement('meta', { name: 'viewport', content: 'width=device-width, initial-scale=1' }),\n      React.createElement(\n        'title',\n        null,\n        options.reportPageTitle\n      ),\n      options.inlineAssets ? React.createElement('style', { dangerouslySetInnerHTML: { __html: styles } }) : React.createElement('link', { rel: 'stylesheet', href: clientStyle })\n    ),\n    React.createElement(\n      'body',\n      { 'data-raw': data, 'data-config': JSON.stringify(options) },\n      React.createElement('div', { id: 'report' }),\n      options.inlineAssets ? React.createElement('script', { type: 'text/javascript', dangerouslySetInnerHTML: { __html: scripts } }) : React.createElement('script', { src: clientScript })\n    )\n  );\n}\n\nMainHTML.propTypes = {\n  data: PropTypes.string,\n  options: PropTypes.object,\n  scripts: PropTypes.string,\n  styles: PropTypes.string\n};\n\nmodule.exports = MainHTML;","/home/travis/build/npmtest/node-npmtest-mochawesome/node_modules/mochawesome/dist/utils.js":"'use strict';\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fs = require('fs-extra');\nvar _ = require('lodash');\nvar chalk = require('chalk');\nvar uuid = require('uuid');\nvar mochaUtils = require('mocha/lib/utils');\nvar stringify = require('json-stringify-safe');\nvar diff = require('diff');\n\n/**\n * Return a classname based on percentage\n *\n * @param {String} msg - message to log\n * @param {String} level - log level [log, info, warn, error]\n * @param {Object} config - configuration object\n */\nfunction log(msg, level, config) {\n  // Don't log messages in quiet mode\n  if (config && config.quiet) return;\n  var logMethod = console[level] || console.log;\n  var out = msg;\n  if ((typeof msg === 'undefined' ? 'undefined' : (0, _typeof3.default)(msg)) === 'object') {\n    out = stringify(msg, null, 2);\n  }\n  logMethod('[' + chalk.gray('mochawesome') + '] ' + out + '\\n');\n}\n\n/**\n * Return a classname based on percentage\n *\n * @param {Integer} pct - percentage\n *\n * @return {String} classname\n */\nfunction getPercentClass(pct) {\n  if (pct <= 50) {\n    return 'danger';\n  } else if (pct > 50 && pct < 80) {\n    return 'warning';\n  } else {\n    return 'success';\n  }\n}\n\n/**\n * Remove all properties from an object except\n * those that are in the propsToKeep array.\n *\n * @param {Object} obj - object to remove props from\n * @param {Array} propsToKeep - properties to keep\n */\nfunction removeAllPropsFromObjExcept(obj, propsToKeep) {\n  _.forOwn(obj, function (val, prop) {\n    if (propsToKeep.indexOf(prop) === -1) {\n      delete obj[prop];\n    }\n  });\n}\n\n/**\n * Strip the function definition from `str`,\n * and re-indent for pre whitespace.\n *\n * @param {String} str - code in\n *\n * @return {String} cleaned code string\n */\nfunction cleanCode(str) {\n  str = str.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/^\\uFEFF/, '').replace(/^function\\s*\\(.*\\)\\s*{|\\(.*\\)\\s*=>\\s*{?/, '').replace(/\\s*\\}$/, '');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length;\n  var tabs = str.match(/^\\n?(\\t*)/)[1].length;\n  /* istanbul ignore next */\n  var re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs || spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n  str = str.replace(/^\\s+|\\s+$/g, '');\n  return str;\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n *\n * @return {Object} cleaned test\n */\nfunction cleanTest(test) {\n  /**\n   * Check that a / b have the same type.\n   */\n  function sameType(a, b) {\n    var objToString = Object.prototype.toString;\n    return objToString.call(a) === objToString.call(b);\n  }\n\n  /* istanbul ignore next: test.fn exists prior to mocha 2.4.0 */\n  var code = test.fn ? test.fn.toString() : test.body;\n  var err = test.err || {};\n  var actual = err.actual,\n      expected = err.expected,\n      showDiff = err.showDiff,\n      stack = err.stack;\n\n\n  if (code) {\n    code = cleanCode(code);\n  }\n\n  if (stack) {\n    err.estack = err.stack;\n  }\n\n  // Create diff for the error\n  if (showDiff !== false && sameType(actual, expected) && expected !== undefined) {\n    /* istanbul ignore if */\n    if (!(_.isString(actual) && _.isString(expected))) {\n      err.actual = mochaUtils.stringify(actual);\n      err.expected = mochaUtils.stringify(expected);\n    }\n    err.diff = diff.createPatch('string', err.actual, err.expected).split('\\n').splice(4).map(function (line) {\n      if (line.match(/@@/)) {\n        return null;\n      }\n      if (line.match(/\\\\ No newline/)) {\n        return null;\n      }\n      return line.replace(/^(-|\\+)/, '$1 ');\n    }).filter(function (line) {\n      return typeof line !== 'undefined' && line !== null;\n    }).join('\\n');\n  }\n\n  var cleaned = {\n    title: test.title,\n    fullTitle: _.isFunction(test.fullTitle) ? test.fullTitle() : /* istanbul ignore next */test.title,\n    timedOut: test.timedOut,\n    duration: test.duration || 0,\n    state: test.state,\n    speed: test.speed,\n    pass: test.state === 'passed',\n    fail: test.state === 'failed',\n    pending: test.pending,\n    context: stringify(test.context, null, 2),\n    code: code,\n    err: err,\n    isRoot: test.parent && test.parent.root,\n    uuid: test.uuid || /* istanbul ignore next: default */uuid.v4(),\n    parentUUID: test.parent && test.parent.uuid\n  };\n\n  cleaned.skipped = !cleaned.pass && !cleaned.fail && !cleaned.pending;\n\n  return cleaned;\n}\n\n/**\n * Mutates the suite object to add properties needed to render\n * the template and remove unused properties.\n *\n * @param {Object} suite\n * @param {Object} totalTestsRegistered\n * @param {Integer} totalTestsRegistered.total\n */\nfunction cleanSuite(suite, totalTestsRegistered) {\n  // console.log(stringify(suite));\n  suite.uuid = uuid.v4();\n\n  var cleanTests = _.map(suite.tests, cleanTest);\n  var passingTests = _.filter(cleanTests, { state: 'passed' });\n  var failingTests = _.filter(cleanTests, { state: 'failed' });\n  var pendingTests = _.filter(cleanTests, { pending: true });\n  var skippedTests = _.filter(cleanTests, { skipped: true });\n  var duration = 0;\n\n  _.each(cleanTests, function (test) {\n    duration += test.duration;\n  });\n\n  totalTestsRegistered.total += suite.tests.length;\n\n  suite.tests = cleanTests;\n  suite.fullFile = suite.file || '';\n  suite.file = suite.file ? suite.file.replace(process.cwd(), '') : '';\n  suite.passes = passingTests;\n  suite.failures = failingTests;\n  suite.pending = pendingTests;\n  suite.skipped = skippedTests;\n  suite.hasTests = suite.tests.length > 0;\n  suite.hasSuites = suite.suites.length > 0;\n  suite.totalTests = suite.tests.length;\n  suite.totalPasses = passingTests.length;\n  suite.totalFailures = failingTests.length;\n  suite.totalPending = pendingTests.length;\n  suite.totalSkipped = skippedTests.length;\n  suite.hasPasses = passingTests.length > 0;\n  suite.hasFailures = failingTests.length > 0;\n  suite.hasPending = pendingTests.length > 0;\n  suite.hasSkipped = suite.skipped.length > 0;\n  suite.duration = duration;\n  suite.rootEmpty = suite.root && suite.totalTests === 0;\n\n  removeAllPropsFromObjExcept(suite, ['title', 'fullFile', 'file', 'tests', 'suites', 'passes', 'failures', 'pending', 'skipped', 'hasTests', 'hasSuites', 'totalTests', 'totalPasses', 'totalFailures', 'totalPending', 'totalSkipped', 'hasPasses', 'hasFailures', 'hasPending', 'hasSkipped', 'root', 'uuid', 'duration', 'rootEmpty', '_timeout']);\n  // console.log(suite.suites[0].tests);\n}\n\n/**\n * Do a breadth-first search to find\n * and format all nested 'suite' objects.\n *\n * @param {Object} suite\n * @param {Object} totalTestsRegistered\n * @param {Integer} totalTestsRegistered.total\n */\nfunction traverseSuites(suite, totalTestsRegistered) {\n  var queue = [];\n  var next = suite;\n  while (next) {\n    if (next.root) {\n      cleanSuite(next, totalTestsRegistered);\n    }\n    if (next.suites.length) {\n      _.each(next.suites, function (nextSuite, i) {\n        cleanSuite(nextSuite, totalTestsRegistered);\n        queue.push(nextSuite);\n      });\n    }\n    next = queue.shift();\n  }\n}\n\n/**\n * Saves a file\n *\n * @param {String} filename\n * @param {String} data\n *\n * @return {Promise}\n */\n\nfunction saveFile(filename, data) {\n  return new _promise2.default(function (resolve, reject) {\n    fs.outputFile(filename, data, function (err) {\n      return err === null ? resolve(true) : reject(err);\n    });\n  });\n}\n\nmodule.exports = {\n  log: log,\n  getPercentClass: getPercentClass,\n  removeAllPropsFromObjExcept: removeAllPropsFromObjExcept,\n  cleanCode: cleanCode,\n  cleanTest: cleanTest,\n  cleanSuite: cleanSuite,\n  traverseSuites: traverseSuites,\n  saveFile: saveFile\n};","/home/travis/build/npmtest/node-npmtest-mochawesome/node_modules/mochawesome/addContext.js":"/*\n * Export addContext function\n *\n */\n\nmodule.exports = require('./dist/addContext');\n","/home/travis/build/npmtest/node-npmtest-mochawesome/node_modules/mochawesome/dist/addContext.js":"'use strict';\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isObject = require('lodash/isObject');\nvar isEmpty = require('lodash/isEmpty');\nvar chalk = require('chalk');\nvar stringify = require('json-stringify-safe');\n\nvar errorPrefix = 'Error adding context:';\nvar ERRORS = {\n  INVALID_ARGS: errorPrefix + ' Invalid arguments.',\n  INVALID_CONTEXT: errorPrefix + ' Expected a string or an object of shape { title: string, value: any } but saw:'\n};\n\n/**\n * HELPER FUNCTIONS\n */\n\n/* istanbul ignore next */\nfunction log(msg, level) {\n  var logMethod = console[level] || console.log;\n  var out = msg;\n  if ((typeof msg === 'undefined' ? 'undefined' : (0, _typeof3.default)(msg)) === 'object') {\n    out = stringify(msg, null, 2);\n  }\n  logMethod('[' + chalk.gray('mochawesome') + '] ' + out + '\\n');\n}\n\nfunction _isValidContext(ctx) {\n  /*\n   * Context is valid if any of the following are true:\n   * 1. Type is string and it is not empty\n   * 2. Type is object and it has properties 'title' and 'value'\n   */\n  return typeof ctx === 'string' && !isEmpty(ctx) || Object.hasOwnProperty.call(ctx, 'title') && Object.hasOwnProperty.call(ctx, 'value');\n}\n\n/**\n * Add context to the test object so it can\n * be displayed in the mochawesome report\n *\n * @param {Object} test object\n * @param {String|Object} context to add\n *        If context is an object, it must have the shape:\n *        {\n *          title: string that is used as context title in the report\n *          value: the context that is to be added\n *        }\n *\n * Usage:\n *\n * it('should test something', function () {\n *   someFunctionThatTestsCode();\n *\n *   addContext(this, 'some context to add');\n *\n *   addContext(this, {\n *     title: 'Expected number of something'\n *     value: 42\n *   });\n *\n *   assert('something');\n * });\n *\n */\n\nvar addContext = function addContext() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  // Check args to see if we should bother continuing\n  if (args.length !== 2 || !isObject(args[0]) || !args[0].test) {\n    log(ERRORS.INVALID_ARGS, 'error');\n    return;\n  }\n\n  var ctx = args[1];\n\n  // Ensure that context meets the requirements\n  if (!_isValidContext(ctx)) {\n    log(ERRORS.INVALID_CONTEXT + '\\n' + stringify(ctx, null, 2), 'error');\n    return;\n  }\n\n  // Context is valid we can proceed\n  var test = args[0].test;\n\n  // Test doesn't already have context -> set it\n  if (!test.context) {\n    test.context = ctx;\n  } else if (Array.isArray(test.context)) {\n    // Test has context and context is an array -> push new context\n    test.context.push(ctx);\n  } else {\n    // Test has context and it is not an array -> make it an array, then push new context\n    test.context = [test.context];\n    test.context.push(ctx);\n  }\n};\n\nmodule.exports = addContext;"}